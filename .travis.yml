language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    - secure: XV0lekmfgT+D9t0ZTIU+UJF6g+p3cBQMO6T6C9lkoKTC0YbtLtxSFtBahD/4PjL86DMJgTaf1nBmxqOxbrfkcpJUxnLe3r8u4Z2L/+7+QSACLNktlIfWNSO+33WxKNb4mVw6jMFZIo4ZurF016MXYzLzjpxRELW2oO2STUs2m44=
    - secure: CQNHbxw8yHlAdUVbKokHzHmj7C+duXP3mifWOkZm9GKw4myWsRFhhoSYZmOSkgj9EWfYYkedrqEr9+GaMg9rkVJuO/7jzn6S+M7CFXKJju6MoZEDO6WcFva4M8pw6IFb9q22GcQ+OsE8/i0DwchTokyFkNb3fpwWuwROUPQ/nWg=

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# the matrix allows you to specify different operating systems and environments to
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # linux publishable node v8
    - os: linux
      env: BUILDTYPE=release
      node_js: 8
    # linux publishable node v8/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 8
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # osx publishable node v8
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 8
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      script:
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
