language: node_js

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# *Here we run tests*
# We prefer running tests in the 'before_script' section rather than 'script' to ensure fast failure.
# Be aware that if you use the 'script' section it will continue running all commands in the section even if one line fails.
# This is documented at https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
# We don't want this behavior because otherwise we might risk publishing builds when the tests did not pass.
# For this reason, we disable the 'script' section below, since we prefer using 'before_script'.
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# We set 'script' here to an empty array to prevent this section from automatically running 'npm test'
# The reason we do this is mentioned above in the comment about the 'before_script' stage.
# For reference, the default travis behavior which we override comes from https://github.com/travis-ci/travis-build/blob/e5a45cbf49e0d9e27398e76e5f25dd7706feb6aa/lib/travis/build/script/node_js.rb#L62-L69.
script:

# the matrix allows you to specify different operating systems and environments to
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v12
    - os: linux
      env: BUILDTYPE=release
      node_js: 12
    # linux publishable node v12/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 12
    # linux publishable node v14
    - os: linux
      env: BUILDTYPE=release
      node_js: 14
    # linux publishable node v14/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 14
    # osx publishable node v12
    - os: osx
      osx_image: xcode11
      env: BUILDTYPE=release
      node_js: 12
    # Sanitizer build node v12/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan CXXFLAGS="-fext-numeric-literals"
      node_js: 12
      sudo: required
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
      script:
        - true
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 10
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - pip install --user codecov
        - codecov --gcov-exec "llvm-cov gcov"
      # avoid double-run of npm test
      script:
        - true
    # Clang format build
    - os: linux
      # can be generic since we don't need nodejs to run formatting
      language: generic
      env: CLANG_FORMAT
      # Overrides `install` to avoid initializing clang toolchain
      install:
        # Run the clang-format script. Any code formatting changes
        # will trigger the build to fail (idea here is to get us to pay attention
        # and get in the habit of running these locally before committing)
        - make format
      # Overrides `script`, no need to run tests
      before_script:
    # Clang tidy build
    # - os: linux
    #   env: CLANG_TIDY
    #   node_js: 10
    #   # Overrides `install` to avoid initializing clang toolchain
    #   install:
    #     # First run the clang-tidy target
    #     # Any code formatting fixes automatically applied by clang-tidy
    #     # will trigger the build to fail (idea here is to get us to pay attention
    #     # and get in the habit of running these locally before committing)
    #     - make tidy
    #   # Overrides `script`, no need to run tests
    #   before_script:
